generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model beacons {
  beacon_id      Int      @id @default(autoincrement())
  proximity_uuid String   @unique @db.VarChar(255)
  major          Int
  minor          Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  rooms          rooms[]
}

model days {
  day_id             Int                  @id @default(autoincrement())
  day                String               @db.VarChar(255)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  subjects_schedules subjects_schedules[]
}

model devices {
  device_id   Int      @id @default(autoincrement())
  user_id     Int
  mac_address String   @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "devices_user_id_foreign")
}

model presences {
  presence_id         Int                 @id @default(autoincrement())
  subject_schedule_id Int
  room_id             Int
  user_id             Int
  is_open             Boolean             @default(false)
  waiting_room        Boolean             @default(false)
  open_time           DateTime            @db.Time(0)
  close_time          DateTime?           @db.Time(0)
  presence_date       DateTime            @default(now())
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  rooms               rooms               @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "presences_room_id_foreign")
  subjects_schedules  subjects_schedules  @relation(fields: [subject_schedule_id], references: [subject_schedule_id], onDelete: NoAction, onUpdate: NoAction, map: "presences_subject_schedule_id_foreign")
  users               users               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "presences_user_id_foreign")
  presences_details   presences_details[]
}

model presences_details {
  presence_detail_id Int       @id @default(autoincrement())
  presence_id        Int
  user_id            Int
  presence_time      DateTime  @db.Time(0)
  presence_date      DateTime  @default(now())
  is_inclass         Boolean   @default(false)
  is_admited         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  presences          presences @relation(fields: [presence_id], references: [presence_id], onDelete: Cascade, onUpdate: NoAction, map: "presences_details_presence_id_foreign")
  users              users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "presences_details_user_id_foreign")
}

model presences_statuses {
  presence_status_id Int      @id @default(autoincrement())
  status             String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model roles {
  role_id    Int      @id @default(autoincrement())
  role       String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users[]
}

model rooms {
  room_id            Int                  @id @default(autoincrement())
  beacon_id          Int
  name               String               @db.VarChar(255)
  room_code          String               @db.VarChar(255)
  location           String               @db.VarChar(255)
  description        String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  beacons            beacons              @relation(fields: [beacon_id], references: [beacon_id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_beacon_id_foreign")
  presences          presences[]
  subjects_schedules subjects_schedules[]
}

model study_groups {
  study_group_id     Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  year               Int                  @db.Int
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  subjects_schedules subjects_schedules[]
  users              users[]
}

model subjects {
  subject_id         Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  acronym            String               @db.VarChar(15)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  subjects_schedules subjects_schedules[]
}

model subjects_schedules {
  subject_schedule_id Int          @id @default(autoincrement())
  subject_id          Int
  user_id             Int
  study_group_id      Int
  room_id             Int
  day_id              Int
  start_time          DateTime     @db.Time(0)
  finish_time         DateTime     @db.Time(0)
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  rooms               rooms        @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_schedules_room_id_foreign")
  study_groups        study_groups @relation(fields: [study_group_id], references: [study_group_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_schedules_study_group_id_foreign")
  subjects            subjects     @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_schedules_subject_id_foreign")
  users               users        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_schedules_user_id_foreign")
  days                days         @relation(fields: [day_id], references: [day_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_schedules_day_id_foreign")
  presences           presences[]
}

model users {
  user_id            Int                  @id @default(autoincrement())
  fullname           String               @db.VarChar(255)
  email              String               @unique(map: "users_email_unique") @db.VarChar(255)
  password           String               @db.VarChar(255)
  sid_eid            String
  gender             String               @db.VarChar(255)
  role_id            Int
  study_group_id     Int?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  roles              roles                @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")
  study_groups       study_groups?        @relation(fields: [study_group_id], references: [study_group_id], onDelete: NoAction, onUpdate: NoAction, map: "users_study_group_id_foreign")
  devices            devices[]
  presences          presences[]
  presences_details  presences_details[]
  subjects_schedules subjects_schedules[]
}
